%{ 
  #include<stdio.h>
%}
%token datatype id comma SC NL
%%
start: datatype varlist SC NL {printf("\n Declartaion Statement is Syntactically Correct");}
	| varlist: varlist comma id|id;
%%
int main()
{
printf("\n Enter the Declaration Statement=:");
 yyparse();
}
int yywrap()
{
 return 1;
} 
int yyerror(const char *str)
{
	printf("\nSyntax Error"); 
	return 0;
}	

/*runnning yacc file 1.lex A3.l
                     2.yacc -dy A3.y
                     3.gcc lex.yy.c y.tab.c
                     4../a.out
 or 



lex lflie name.lex
gcc lex.yy.c y.tab.c    =lex and yac both compilation
./a.out


parts of yacc  1.declaration
               2.translation rule
               3.supporting c function
               
  yacc is lalr parser, lex and yacc work togehter to analyze program syntactically



compile inputs  =
lex lflie name.lex
gcc lex.yy.c y.tab.c    =lex and yac both compilation
./a.out

or 
lex filename.l         =>o/p is lex.y
yacc -d filename.y     =>compilation yacc y.tab.c
cc.lex.yy.c y.tab.c    =>generated obj file.
./a.out

input= int a=10;
  */                    

input int a,b,c



oral

// 1>
syntax analysis ===>>  in the syntax analysis phase a compiler verifies wheather or not the tokens generated by lexical analyzer are grouped
according to the syntatic rules of the language
2>
syntax analysis is done by parser
3>
the parser obtain a string of tokens from the lexical analyzer and verifies that the grammer for the source language

*> Lex program generates token and accept that generated tokens or context free grammer if will in Statements

**>> function in yacc
1>> YY Parse 
-it is entry point of yacc program
-it is used to demand tokens the program
-

2>> YY error
-YY error is function in the Yacc called when a parsing error is this 
- it is used to print error message take other appropriate action 
 
 3>> Yacc source files has three main sections divide by %%
  1>first section contain defination & declaration used by Yacc & generated code
  2>the Second section contain the grammer of rules and associated semantic actions 
  3>the third section can contain additional c code to be copied directly to output file
  //


  1>> LEX (lexer genrator)
1> lex is a tool for genrating lexical analyzers also known as lexers or tokenizers.
-input of lex is set of regular EXPRESSION
-output of lex is lexical analyzers
-lex is a computer program that genrates lexical analyzers.
-lex is commonly used with the yacc parser genrator

2>> Yacc (parser genrate)
-Yacc is a tool of genrating parsers for content tree grammers.
-yacc takes a format grammer specification & associated action as input & generates c code for parser
-input of yacc is the rule or grammer
-output of yacc is c code for parser(c program)
-$ in yacc represents the value returned by the complete action.
//