%{
#include<stdio.h>
#include<stdlib.h>
#include<math.h>
int yylex();
int yyerror();
%}
//In Yacc/Bison, the %left directive is used to specify the associativity and precedence of operators in the grammar. It is typically used to resolve shift/reduce conflicts.
%union
{
double dval;
}
//In Yacc/Bison, <dval> typically represents a semantic value associated with a non-terminal symbol or a production rule. In this case, when you see <dval> associated with NUMBER, it implies that the value of the token NUMBER will be stored in a variable named dval.
%token <dval> NUMBER
%token NAME 
%left '+''-'
%left '*''/'
%type <dval> E
%%
S : NAME '=' E
  | E		        {printf("=%g\n",$1);}
  ;

E : E '+' E	{$$=$1+$3;}
  | E '-' E	{$$=$1-$3;}
  | E '*' E	{$$=$1*$3;}
  | E '/' E	{$$=$1/$3;}
  |'('E')'      {$$=$2;}
  | NUMBER	{$$=$1;}
  ;

%%
int main()
{
printf("\nEnter the expression : \n");
yyparse();
return 0;
}
int yyerror()
{
printf("syntax error");
}


/*
inputs=
2+3
8-9
8/9
8*8

lex fn.lex
gcc lex.yy.c y.tab.c
./a.out

*/
// 1>
syntax analysis ===>>  in the syntax analysis phase a compiler verifies wheather or not the tokens generated by lexical analyzer are grouped
according to the syntatic rules of the language
2>
syntax analysis is done by parser
3>
the parser obtain a string of tokens from the lexical analyzer and verifies that the grammer for the source language

*> Lex program generates token and accept that generated tokens or context free grammer if will in Statements

**>> function in yacc
1>> YY Parse 
-it is entry point of yacc program
-it is used to demand tokens the program
-

2>> YY error
-YY error is function in the Yacc called when a parsing error is this 
- it is used to print error message take other appropriate action 
 
 3>> Yacc source files has three main sections divide by %%
  1>first section contain defination & declaration used by Yacc & generated code
  2>the Second section contain the grammer of rules and associated semantic actions 
  3>the third section can contain additional c code to be copied directly to output file
  //